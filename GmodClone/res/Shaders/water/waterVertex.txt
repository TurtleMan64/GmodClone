#version 400 core

in vec2 position;

out vec4 clipSpace;
out vec2 textureCoords;
out vec3 toCameraVector;
out vec3 passCameraPosition;
//out vec3 fromLightVector;
//out vec4 shadowCoords;

out vec3 worldposition;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform vec3 cameraPosition;
uniform vec3 lightPosition;
uniform mat4 toShadowMapSpace;
uniform vec4 clipPlaneBehind;

const float tiling = 6.0;   //4.0

//const float shadowDistance = 2000.0; // must keep in sync with other vertex shader
//const float transitionDistance = 100.0; //10.0 original

void main(void) 
{
	vec4 worldPosition = modelMatrix * vec4(position.x, 0.0f, position.y, 1.0);
    gl_ClipDistance[1] = dot(worldPosition, clipPlaneBehind);
	worldposition = worldPosition.xyz;
	//shadowCoords = toShadowMapSpace * worldPosition;
	clipSpace = projectionMatrix * viewMatrix * worldPosition;
	gl_Position = clipSpace;
	textureCoords = vec2(position.x/2.0 + 0.5, position.y/2.0 + 0.5) * tiling;
	toCameraVector = cameraPosition - worldPosition.xyz;
	passCameraPosition = cameraPosition;
	//fromLightVector = worldPosition.xyz - lightPosition;
	
	
	
	//vec4 positionRelativeToCam = viewMatrix * worldPosition;
	//float distance = length(positionRelativeToCam.xyz);
	//distance = distance - (shadowDistance - transitionDistance);
	//distance = distance / transitionDistance;
	//shadowCoords.w = clamp(1.0-distance, 0.0, 1.0);
}